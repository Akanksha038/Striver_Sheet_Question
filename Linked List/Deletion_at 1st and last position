/******************************************************************************

In this code we delete only first and last node


*******************************************************************************/

#include <iostream>
using namespace std;
 class Node
 {
     public:
     int data;
     Node*next;
     Node(int data)
     {
         this->data=data;
         this->next=NULL;
     }
     
     ~Node(){
         cout<<"destructor is called"<<endl;
         cout<<"Node with value"<<this->data<<" Deleted"<<endl;
     }
     
     
 };
 
 
 // InsertAThEAD
 void InsertAtHead(Node*&head,Node*&tail,int data)
 {
     Node*newNode=new Node(data);
     if(head==NULL)
     {
         head=newNode;
         tail=newNode;
     }
     else
     {
         newNode->next=head;
         head=newNode;
     }
     
 }
 //InsertAttail
void InsertAttail(Node*&head,Node*&tail,int data) 
{
    
    
    
     Node*newNode=new Node(data);
     if(tail==NULL)
     {
         head=newNode;
         tail=newNode;
     }
     else
     {
         tail->next=newNode;
         tail=newNode;
     }
}

//finding length of ll{
    /* code */
    
    int Length(Node*&head)
    {
        int length=0;
        Node*temp=head;
        while(temp!=NULL)
        {
            length++;
            temp=temp->next;
            
        }
        
        return length;
        
    }


//insert at Position
void insertAtPosition(int Position,Node*&head,Node*&tail,int data)
{
    
    
    if(Position==0)
    {
        InsertAtHead(head,tail,data);
        return;
    }
     int len=Length(head);
    if(Position>=len){
    
        InsertAttail(head,tail,data);
        return;
    }
    
    
    Node*newNode=new Node(data);
    
    //find previous and current pointer
    
    int i=1;
     Node*previous=head;
      Node*current;
    while(i<Position)
    {
        previous=previous->next;
        i++;
        
        
    }
    
    current=previous->next;
    newNode->next=current;
    previous->next=newNode;
    
}


//************** Deletion of LL*************//

void deletionNode( int position ,Node*&head,Node*&tail)
{
    if(head==NULL)
    {
        cout<<" Cannot delete , LL is Empty"<<endl;
    }
    
    if(position==1)
    {
        Node*temp=head;
        head=head->next;
        temp->next=NULL;
        delete temp;
        return;
     }
     
     //deleting last node
     int len=Length(head);
     if(position==len)
     {
         Node*prev=head;
         Node*current;
         
         //find currentand prev;
         int i=1;
         while(i<len-1)
         {
             prev=prev->next;
             i++;
         }
         
         prev->next=NULL;
         
         Node*temp=tail;
         tail=prev;
         delete temp;
         return;
         
         
     }
    
    
}



 void print(Node*&head)
 {
     Node*temp=head;
     while(temp!=NULL)
     {
         cout<<temp->data<<" ";
         temp=temp->next;
     }
 }
 
int main()
{
    
    Node*tail;
    Node*head=new Node(1);
     Node*second=new Node(11);
      Node*third=new Node(111);
       Node*fourth=new Node(1111);
       
       head->next=second;
       tail=second;
       second->next=third;
       tail=third;
       third->next=fourth;
       tail=fourth;
    
    
    print(head);
    cout<<endl;
    
    deletionNode(4,head,tail);
     print(head);
     
     
     

    return 0;
}

// output

// 1 11 111 1111 
// destructor is called
// Node with value1111 Deleted
// 1 11 111 
