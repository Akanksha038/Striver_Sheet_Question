/******************************************************************************
Two Stack in an One  Pointer Array

*******************************************************************************/
#include <iostream>
using namespace std;
class stack{
    public:
    int size;
    int *arr;
    int top1;
    int top2;
    
    stack(int size){
        arr=new int[size];
        this->size=size;
        top1=-1;
        top2=size;
    }
    
    void  push1(int data){
        if(top2-top1==1){
            cout<<"Overflow in stack 1"<<endl;
        }
        
        else{
            top1++;
            arr[top1]=data;
        }
    }
    
    
     void  push2(int data){
        if(top2-top1==1){
            cout<<"Overflow in stack 2"<<endl;
        }
        
        else{
            top2--;
            arr[top2]=data;
        }
    }
    
    
    
    
    void pop1(){
        if(top1==-1){
            cout<<" underflow in stack 1"<<endl;
            
        }
        
        else{
            arr[top1]=0;
            top1--;
        }
        
    }
    
    
    void pop2()
    {
        if(top2==size){
            cout<<" underflow in stack 2"<<endl;
            
        }
        
        else{
            arr[top2]=0;
            top2++;
        }
        
    }
    
    
    void print(){
        cout<<endl;
        cout<<"top1: "<<top1<<endl;
        cout<<"top2:"<<top2<<endl;
        for(int i=0;i<size;i++){
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
};
int main()
{
    
    
    stack s(10);
    
    s.push1(10);
    s.print();
    
    
     s.push1(20);
    s.print();
    
     s.push1(30);
    s.print();
    
     s.push1(40);
    s.print();
    
     s.push1(50);
    s.print();
    
    
    
     s.push2(100);
    s.print();
    
     s.push2(200);
    s.print();
    
     s.push2(300);
    s.print();
    
     s.push2(400);
    s.print();
     s.push2(500);
    s.print();
    
     s.push2(700);
   
    
     s.push1(7000);
     cout<<endl;
     cout<<" here we perform pop operation in stack 1 and stack 2"<<endl;
     s.pop1();
     s.print();
   
   
    s.pop1();
     s.print();
     
      s.pop1();
     s.print();
     
      s.pop1();
     s.print();
     
      s.pop1();
     s.print();
     
   
    s.pop1();
     s.print();
     
     
      s.pop2();
     s.print();
     
       s.pop2();
     s.print();
       s.pop2();
     s.print();
       s.pop2();
     s.print();
       s.pop2();
     s.print();
       s.pop2();
     s.print();
     
   
    
  
    return 0;
}



// output:




// top1: 0
// top2:10
// 10 0 0 0 0 0 0 0 0 0 

// top1: 1
// top2:10
// 10 20 0 0 0 0 0 0 0 0 

// top1: 2
// top2:10
// 10 20 30 0 0 0 0 0 0 0 

// top1: 3
// top2:10
// 10 20 30 40 0 0 0 0 0 0 

// top1: 4
// top2:10
// 10 20 30 40 50 0 0 0 0 0 

// top1: 4
// top2:9
// 10 20 30 40 50 0 0 0 0 100 

// top1: 4
// top2:8
// 10 20 30 40 50 0 0 0 200 100 

// top1: 4
// top2:7
// 10 20 30 40 50 0 0 300 200 100 

// top1: 4
// top2:6
// 10 20 30 40 50 0 400 300 200 100 

// top1: 4
// top2:5
// 10 20 30 40 50 500 400 300 200 100 
// Overflow in stack 2
// Overflow in stack 1

//  here we perform pop operation in stack 1 and stack 2

// top1: 3
// top2:5
// 10 20 30 40 0 500 400 300 200 100 

// top1: 2
// top2:5
// 10 20 30 0 0 500 400 300 200 100 

// top1: 1
// top2:5
// 10 20 0 0 0 500 400 300 200 100 

// top1: 0
// top2:5
// 10 0 0 0 0 500 400 300 200 100 

// top1: -1
// top2:5
// 0 0 0 0 0 500 400 300 200 100 
//  underflow in stack 1

// top1: -1
// top2:5
// 0 0 0 0 0 500 400 300 200 100 

// top1: -1
// top2:6
// 0 0 0 0 0 0 400 300 200 100 

// top1: -1
// top2:7
// 0 0 0 0 0 0 0 300 200 100 

// top1: -1
// top2:8
// 0 0 0 0 0 0 0 0 200 100 

// top1: -1
// top2:9
// 0 0 0 0 0 0 0 0 0 100 

// top1: -1
// top2:10
// 0 0 0 0 0 0 0 0 0 0 
//  underflow in stack 2

// top1: -1
// top2:10
// 0 0 0 0 0 0 0 0 0 0 


// === Code Execution Successful ===
